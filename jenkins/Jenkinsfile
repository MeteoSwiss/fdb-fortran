pipeline {
    agent {label 'podman'}

    options {

        disableConcurrentBuilds()
        buildDiscarder(logRotator(artifactDaysToKeepStr: '7', artifactNumToKeepStr: '3',
                                  daysToKeepStr: '7', numToKeepStr: '3'))
        timeout(time: 48, unit: 'HOURS')
    }
    environment {
        CR_ALL = 'docker-all-nexus.meteoswiss.ch'
        SPACK_TAG='dev_PR-12'
        TAG = "flexpart-poc/fdb"
        VERSION = sh(
            returnStdout: true, 
            script: 'if [ "$BRANCH_NAME" = "main" ]; then echo -n latest; else echo -n dev_${BRANCH_NAME}; fi'
            )
        IMAGE_INTERN = "docker-intern-nexus.meteoswiss.ch/$TAG:$VERSION"
        IMAGE_PUBLIC = "docker-public-nexus.meteoswiss.ch/$TAG:$VERSION"
        DOCKER_CONFIG = "$workspace/.docker"
        REGISTRY_AUTH_FILE = "$workspace/.containers/auth.json"
        HTTP_PROXY = 'http://proxy.meteoswiss.ch:8080/'
    }
    stages {
        stage('Deploy image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'openshift-nexus',
                                          passwordVariable: 'NXPASS',
                                          usernameVariable: 'NXUSER'), 
                                 usernamePassword(credentialsId: 'github app credential for the meteoswiss-apn github organization',
                                          usernameVariable: 'GITHUB_APP',
                                          passwordVariable: 'GITHUB_ACCESS_TOKEN')]) {
                    sh '''
                        echo \$NXPASS | podman login docker-intern-nexus.meteoswiss.ch -u \$NXUSER --password-stdin
                        echo \$NXPASS | podman login docker-public-nexus.meteoswiss.ch -u \$NXUSER --password-stdin
                        
                        pwd && ls
                        test -d ctx && rm -rf ctx
                        mkdir ctx

                        cp docker/Dockerfile docker/entrypoint.sh docker/fdb_schema docker/fdb_config.yaml docker/spack.yaml ctx/
                        podman build --format docker --pull --build-arg TOKEN=$GITHUB_ACCESS_TOKEN --build-arg container_registry=\$CR_ALL --build-arg spack_tag=\$SPACK_TAG -t \$IMAGE_INTERN ctx
                        podman push \$IMAGE_INTERN
                        podman tag \$IMAGE_INTERN \$IMAGE_PUBLIC
                        if [ "$VERSION" = "latest" ]; then podman push \$IMAGE_PUBLIC; fi
                    '''
                }
            }
            post {
                cleanup {
                    sh """
                    rm -rf ctx
                    podman image rm -f \$IMAGE_INTERN
                    podman image rm -f \$IMAGE_PUBLIC
                    podman logout docker-intern-nexus.meteoswiss.ch || true
                    podman logout docker-public-nexus.meteoswiss.ch || true
                    """
                }
            }
        }
        stage('Test container') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'openshift-nexus',
                                          passwordVariable: 'NXPASS',
                                          usernameVariable: 'NXUSER')]) {
                    sh '''
                        echo \$NXPASS | podman login docker-intern-nexus.meteoswiss.ch -u \$NXUSER --password-stdin
                        echo \$NXPASS | podman login docker-public-nexus.meteoswiss.ch -u \$NXUSER --password-stdin

                        podman pull \$IMAGE_INTERN
                        
                        context=$(pwd)/ctx
                        mkdir -p $context
                        mkdir -p $context/fdb_data
                        mkdir -p $context/data
                        cp docker/fdb_schema $context/fdb_schema
                        ls -R $context

                        cd $context/data
                        wget -q https://nexus.meteoswiss.ch/nexus/repository/app-artifacts-mch/nwp-rzplus/flexpart-poc/flexpart/dispf2022070300
                        wget -q https://nexus.meteoswiss.ch/nexus/repository/app-artifacts-mch/nwp-rzplus/flexpart-poc/flexpart/dispf2022070301
                        wget -q https://nexus.meteoswiss.ch/nexus/repository/app-artifacts-mch/nwp-rzplus/flexpart-poc/flexpart/dispf2022070302
                        wget -q https://nexus.meteoswiss.ch/nexus/repository/app-artifacts-mch/nwp-rzplus/flexpart-poc/flexpart/dispf2022070303
                        wget -q https://nexus.meteoswiss.ch/nexus/repository/app-artifacts-mch/nwp-rzplus/flexpart-poc/flexpart/dispf2022070304

                        podman run --name fdb-container-test -v $context/data:/fdb_data_files:ro -v $context/fdb_schema:/scratch/fdb_schema \$IMAGE_INTERN
                        podman cp fdb-container-test:/fdb_data $context
                        [ "$(ls -A $context/fdb_data)" ] && ls -A $context/fdb_data || (echo "No data found in fdb output folder" && exit 1)

                    '''
                }
            }
        }
    }
    post {
        always {
            echo "Build stage complete"
        }
        failure {
            echo "Build failed"
            emailext(subject: "${currentBuild.fullDisplayName}: ${currentBuild.currentResult}",
                     body: """Job '${env.JOB_NAME} #${env.BUILD_NUMBER}': ${env.BUILD_URL}""",
                     recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']])
        }
        success {
            echo "Build succeeded"
        }
        cleanup {
            sh """
            rm -rf ctx
            podman image rm -f \$IMAGE_INTERN
            podman rm fdb-container-test
            """
        }
    }
}
